{-# LANGUAGE OverloadedStrings #-}

module Lab1_Test where

import EasyTest
import Control.Applicative

import Lab1

-- Для запуска сделайте двойной щелчок по этому файлу или зайдите в директорию и запустите 
-- ghci Lab1_Test из командной строки.
-- Для перезагрузки после изменений (в Lab1 или Lab1_Test) используйте команду :reload (сокращённо :r) внутри GHCi.
-- Не забудьте попробовать :help (:h)!

-- документация EasyTest в EasyTest.html (http://hackage.haskell.org/package/easytest-0.2.1/docs/EasyTest.html)
-- там используются понятия и синтаксис, которые нам пока незнакомы, не беспокойтесь об этом
-- к концу курса вы должны быть способны понять большую часть EasyTest :)
-- <|> комбинирует тесты

-- обратите внимание на оформление списка: так удобнее добавлять, удалять и комментировать элементы в конце
allTests = tests
  -- scope даёт название тесту (и может быть вложено)
  [ scope "xor" $ tests 
      -- expect проверяет условие (безусловный успех: ok, безусловная ошибка: crash "причина")
      [ expect $ xor True True == False
      , expect $ xor True False == True
      , expect $ xor False True == True
      , expect $ xor False False == False
      ]
    , 
	scope "max3" $ -- или tests [ expect (max3 1 3 2 == 3), expect (max3 5 2 5 == 5) ]
      expect (max3 1 3 2 == 3) <|>
      expect (max3 5 2 5 == 5) 
	  ]
	, 
	scope "median3" $ tests
      [ expect $ median3 1 4 5 == 4
      , expect $ median3 7 2 0 == 2
      , expect $ median3 1 1 9 == 1 ]
    ,
    scope "geomProgression" $ tests
      [ expect $ geomProgression 3.0 2 2 == 12.0
      , expect $ geomProgression (-2.0) (-5.0) 4 == (-1250.0)
	  , expect $ geomProgression (1.0) (-2.0) 4 == 16.0 ]
    ,
    scope "rgbToCmyk" $ tests
      [ expect $ rgbToCmyk (RGB 41 5 73) ~= (CMYK 0.4384 0.9315 0.0 0.7137)
      , expect $ rgbToCmyk (RGB 0 255 0) ~= (CMYK 1.0 0.0 1.0 0.0)
      ]
    ,
    scope "coprime" $ tests
      [ expect $ coprime 55 15 == False
      , expect $ coprime 43 71 == True
      , expect $ coprime (-34) 74 == False ]
    ,
    scope "distance" $ tests
      [ expect $ distance (Point [4.0, 0.0]) (Point [0.0, 3.0]) ~= 5.0
      , expect $ distance (Point [5.0, 0.0]) (Point [0.0, 12.0]) ~= 13.0
      , expect $ distance (Point [5.0, 0.0, 1.0]) (Point [0.0, 12.0, 1.0]) ~= 13.0 ]
    ,
    scope "intersect" $ tests
      [ expect $ intersect [1, 2] [3, 5, 4, 1, 7, 0] == [1]
      , expect $ intersect [2, 6, 9] [3, 5, 4, 1, 7, 0] == []
      , expect $ intersect [1, 4, 3 ,7, 5, 0] [3, 5, 4, 1, 7, 0] == [1, 4, 3, 7, 5, 0] ]
    ,
    scope "zipN" $ tests
      [ expect $ zipN [[1, 2, 3], [4, 5, 6], [7, 8, 9]] == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
      , expect $ zipN zipN [[1,1,1], [2,2,2], [3,3,3]] == [[1, 2, 3],[1, 2, 3],[1, 2, 3]]
      , expect $ zipN zipN [[1], [2,2], [3,3,3]] == [[1, 2, 3]] ]
    ,
    scope "find" $ tests
      [ expect $ find (> 0) [-1, -2, -3, 4] == Just 4
      , expect $ find (> 0) [-1, -9, 5 , 7, 10] == Just 5
      , expect $ find (> 0) [-1, -9] == Nothing

      , expect $ find_with_filter (> 0) [-1, -2, -3, 4] == Just 4
      , expect $ find_with_filter (> 0) [-1, -9, 5 , 7, 10] == Just 5
      , expect $ find_with_filter (> 0) [-1, -9] == Nothing
      ]
    ,
    scope "findLast" $ tests
      [ expect $ findLast (> 0) [-1, -2, -3, 4] == Just 4
      , expect $ findLast (> 0) [-1, -9, 5 , 7, 10] == Just 10
      , expect $ findLast (> 0) [-1, -9] == Nothing
      ]
    ,  
    scope "mapFuncs" $ tests
      [ expect $ mapFuncs [\x -> x*x, (1 +), \x -> if even x then 1 else 0] 3 == [9, 4, 0]
      , mapFuncs [\x -> x*x*x, (4 -), \x -> if even x then 1 else 0] 7 == [343, -3, 0]
      ]
    ,
    scope "satisfiesAll" $ tests
      [ expect $ satisfiesAll [even, \x -> x `rem` 5 == 0] 10 == True
      , expect $ satisfiesAll [] 4 == True
      ]
	,  
    scope "NEL" $ tests
      [ expect $ tailNel (NEL 10 []) == []
      , expect $ tailNel (NEL [5, 4] [[2, 5], [7, 8]]) == [[2, 5], [7, 8]]

      , expect $ lastNel (NEL 10 []) == 10
      , expect $ lastNel (NEL [5, 4] [[2, 5], [7, 8]]) == [7, 8]

      , expect $ zipNel (NEL 5 []) (NEL 10 []) == [(5, 10)]
      , expect $ zipNel (NEL 5 [1, 2]) (NEL 9 [3, 4]) == [(5, 9),(1, 3), (2, 4)]

      , expect $ listToNel [7] == NEL 7 []
      , expect $ listToNel [[6, 9], [1, 7], [2, 3]] == NEL [6,9] [[1, 7], [2, 3]]

      , expect $ nelToList (NEL 5 []) == [5]
      , expect $ nelToList (NEL [4, 3] [[6, 0], [1, 2]]) == [[4, 3], [6, 0], [1, 2]]
      ]
    
  ]

main = run allTests -- runOnly "xor" allTests
                    -- rerun XXXX (или rerunOnly XXXX "xor") для повтора случайных тестов
